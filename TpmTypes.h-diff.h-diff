1281a1282,1351
> /*****************************************************************************/
> /*                             Sphincs+ Mods                                 */
> /* SPHINCS+-128f has the following parameter set :							 */
> /* n : the security parameter = 16											 */
> /* w : the Winternitz parameter = 16										 */
> /* h : the height of the hypertree = 60										 */
> /* d : the number of layers in the hypertree = 20							 */
> /* k : the number of trees in FORS = 30										 */
> /* t : the number of leaves of a FORS tree									 */
> /* log(t) = 9																 */
> /* sig bytes = 16,976														 */
> /*****************************************************************************/
> /* Parameters (SPX_) are defined in sphincsplus-params.h */
> /* The message size is defined in sphincsplus-PQCgenKAT_sign.c */
> /* The signature size is defined in sphincsplus-spx.c */
> /* SPHINCS+ - Hash output length in bytes. */
> #define SPX_N 16
> /* SPHINCS+ Height of the hypertree. */
> #define SPX_FULL_HEIGHT 60
> /* SPHINCS+ Number of subtree layer. */
> #define SPX_D =20
> /* SPHINCS+ FORS tree dimensions. */
> #define SPX_FORS_HEIGHT 9
> #define SPX_FORS_TREES 30
> /* SPHINCS+ Winternitz parameter, */
> #define SPX_WOTS_W 16
> 
> /* SPHINCS+ WOTS parameters. */
> #define SPX_WOTS_LOGW 4
> #define SPX_WOTS_LEN1 (8 * SPX_N / SPX_WOTS_LOGW)
> #define SPX_WOTS_LEN2 3
> #define SPX_WOTS_LEN (SPX_WOTS_LEN1 + SPX_WOTS_LEN2)
> #define SPX_WOTS_BYTES (SPX_WOTS_LEN * SPX_N)
> 
> /* SPHINCS+ FORS parameters. */
> #define SPX_FORS_BYTES ((SPX_FORS_HEIGHT + 1) * SPX_FORS_TREES * SPX_N)
> 
> /* SPHINCS+ Signature Size */
> /* SPX_BYTES = (16 + 4800 + 20 * 560) + (60 * 16) = 16016 + 960 = 16976 */
> #define SPX_BYTES (SPX_N + SPX_FORS_BYTES + SPX_D * SPX_WOTS_BYTES +\
>                    SPX_FULL_HEIGHT * SPX_N)
> /* SPHINCS+ Public Key Size */
> #define SPX_PK_BYTES (2 * SPX_N)
> /* SPHINCS+ Secret Key Size */
> #define SPX_SK_BYTES (2 * SPX_N + SPX_PK_BYTES)
> /* SPHINCS+ Message Size */
> #define SPX_MLEN_BYTES 3300
> /* SPHINCS+ Signed Message Size */
> #define SPX_SMLEN_BYTES (SPX_BYTES + SPX_MLEN_BYTES)
> 
> #define MAX_SPHINCS_PLUS_PUBLIC_KEY_SIZE SPX_PK_BYTES
> #define MAX_SPHINCS_PLUS_SECRET_KEY_SIZE SPX_SK_BYTES
> #define MAX_SPHINCS_PLUS_MESSAGE_SIZE SPX_MLEN_BYTES
> #define MAX_SPHINCS_PLUS_SIGNED_MESSAGE_SIZE SPX_SMLEN_BYTES
> 
> typedef union {
> 	struct {
> 		UINT32                  size;
> 		BYTE                    buffer[MAX_SPHINCS_PLUS_PUBLIC_KEY_SIZE];
> 	}            t;
> 	TPM2B        b;
> } TPM2B_SPHINCS_PLUS_PUBLIC_KEY;
> 
> typedef union {
> 	struct {
> 		UINT32                  size;
> 		BYTE                    buffer[MAX_SPHINCS_PLUS_SECRET_KEY_SIZE];
> 	}            t;
> 	TPM2B        b;
> } TPM2B_SPHINCS_PLUS_SECRET_KEY;
1282a1353,1370
> typedef union {
> 	struct {
> 		UINT32                  size;
> 		BYTE                    buffer[MAX_SPHINCS_PLUS_SIGNED_MESSAGE_SIZE];
> 	}            t;
> 	TPM2B        b;
> } TPM2B_SPHINCS_PLUS_SIGNED_MESSAGE;
> 
> typedef union {
> 	struct {
> 		UINT32                  size;
> 		BYTE                    buffer[MAX_SPHINCS_PLUS_MESSAGE_SIZE];
> 	}            t;
> 	TPM2B        b;
> } TPM2B_SPHINCS_PLUS_MESSAGE;
> /*****************************************************************************/
> /*                             Sphincs+ Mods                                */
> /*****************************************************************************/
1712a1801,1808
> /*****************************************************************************/
> /*                             Sphincs+ Mods                                */
> /*****************************************************************************/
> typedef  TPMS_SCHEME_HASH     TPMS_SIG_SCHEME_SPHINCS_PLUS;
> /*****************************************************************************/
> /*                             Sphincs+ Mods                                */
> /*****************************************************************************/
> 
1724a1821,1823
> #if 	ALG_SPHINCS_PLUS
> 	TPMS_SIG_SCHEME_SPHINCS_PLUS    sphincsplus;
> #endif   // ALG_SPHINCS_PLUS
1794a1894,1896
> #if 	ALG_SPHINCS_PLUS
> 	TPMS_SIG_SCHEME_SPHINCS_PLUS    sphincsplus;
> #endif   // ALG_SPHINCS_PLUS
1867a1970,1980
> /*****************************************************************************/
> /*                             Sphincs+ Mods                                */
> /*****************************************************************************/
> typedef  TPM_ALG_ID         TPMI_ALG_SPHINCS_PLUS_SCHEME;
> typedef struct {
> 	TPMI_ALG_SPHINCS_PLUS_SCHEME scheme;
> 	TPMU_ASYM_SCHEME          details;
> } TPMT_SPHINCS_PLUS_SCHEME;
> /*****************************************************************************/
> /*                             Sphincs+ Mods                                */
> /*****************************************************************************/
1953a2067,2076
> /*****************************************************************************/
> /*                             Sphincs+ Mods                                */
> /*****************************************************************************/
> typedef struct {
> 	TPMI_ALG_HASH                  hash;
> 	TPM2B_SPHINCS_PLUS_SIGNED_MESSAGE sig;
> } TPMS_SIGNATURE_SPHINCS_PLUS;
> /*****************************************************************************/
> /*                             Sphincs+ Mods                                */
> /*****************************************************************************/
1978a2102,2104
> #if 	ALG_SPHINCS_PLUS
> 	TPMS_SIGNATURE_SPHINCS_PLUS    sphincsplus;
> #endif   // ALG_SPHINCS_PLUS
2048a2175,2177
> #if 	ALG_SPHINCS_PLUS
> 	TPM2B_SPHINCS_PLUS_PUBLIC_KEY sphincsplus;
> #endif   // ALG_SPHINCS_PLUS
2119a2249,2258
> /*****************************************************************************/
> /*                             Sphincs+ Mods                                */
> /*****************************************************************************/
> typedef struct {
> 	TPMT_SYM_DEF_OBJECT   symmetric;
> 	TPMT_SPHINCS_PLUS_SCHEME scheme;
> } TPMS_SPHINCS_PLUS_PARMS;
> /*****************************************************************************/
> /*                             Sphincs+ Mods                                */
> /*****************************************************************************/
2140a2280,2282
> #if 	ALG_SPHINCS_PLUS
> 	TPMS_SPHINCS_PLUS_PARMS    sphincsplusDetail;
> #endif   // ALG_SPHINCS_PLUS
2188a2331,2333
> #if 	ALG_SPHINCS_PLUS
> 	TPM2B_SPHINCS_PLUS_SECRET_KEY      sphincsplus;
> #endif   // ALG_SPHINCS_PLUS
