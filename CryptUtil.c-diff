396a397,399
> #if ALG_SPHINCS_PLUS
> 	ok = ok && CryptSphincsPlusInit();
> #endif // TPM_ALG_SPHINCS_PLUS
428a432,434
> #if ALG_SPHINCS_PLUS
> 		&& CryptSphincsPlusStartup()
> #endif // TPM_ALG_SPHINCS_PLUS
491a498,500
> #if ALG_SPHINCS_PLUS
> 	  case TPM_ALG_SPHINCS_PLUS:
> #endif
1040a1050,1055
> #if ALG_SPHINCS_PLUS
> 		// Create Sphincs+ key
> 	  case TPM_ALG_SPHINCS_PLUS:
> 		  result = CryptSphincsPlusGenerateKey(object, rand);
> 		  break;
> #endif // TPM_ALG_SPHINCS_PLUS
1142a1158,1165
> #if ALG_SPHINCS_PLUS
> 		// If SPHINCS_PLUS is supported
> #   if !defined TPM_ALG_SPHINCS_PLUS
> #       error "SPHINCS_PLUS is required for SPHINCS_PLUS"
> #   endif
> 	  case TPM_ALG_SPHINCS_PLUS:
> 		  return auth->signature.sphincsplus.hash;
> #endif //TPM_ALG_SPHINCS_PLUS
1231a1255,1258
> #if ALG_SPHINCS_PLUS
> 	  case TPM_ALG_SPHINCS_PLUS:
> 		  break;
> #endif // TPM_ALG_SPHINCS_PLUS
1436a1464,1468
> #if ALG_SPHINCS_PLUS
> 	  case TPM_ALG_SPHINCS_PLUS:
> 		  result = CryptSphincsPlusSign(signature, signKey, digest);
> 		  break;
> #endif // TPM_ALG_SPHINCS_PLUS
1491a1524,1529
> #if ALG_SPHINCS_PLUS
> 	  case TPM_ALG_SPHINCS_PLUS:
> 		  // Call SPHINCS_PLUS code to verify signature
> 		  result = CryptSphincsPlusValidateSignature(signature, signObject, digest);
> 		  break;
> #endif //TPM_ALG_SPHINCS_PLUS
1592a1631,1651
> #if ALG_SPHINCS_PLUS
> 	  case TPM_ALG_SPHINCS_PLUS:
> 		  switch (publicArea->parameters.sphincsplusDetail.mode) {
> 		  case TPM_SPHINCS_PLUS_MODE_1:
> 			  consistent = publicArea->unique.sphincsplus.t.size == 896;
> 			  break;
> 		  case TPM_SPHINCS_PLUS_MODE_2:
> 			  consistent = publicArea->unique.sphincsplus.t.size == 1184;
> 			  break;
> 		  case TPM_SPHINCS_PLUS_MODE_3:
> 			  consistent = publicArea->unique.sphincsplus.t.size == 1472;
> 			  break;
> 		  case TPM_SPHINCS_PLUS_MODE_4:
> 			  consistent = publicArea->unique.sphincsplus.t.size == 1760;
> 			  break;
> 		  default:
> 			  consistent = FALSE;
> 			  break;
> 		  }
> 		  break;
> #endif //TPM_ALG_SPHINCS_PLUS
1669a1729,1749
> #if ALG_SPHINCS_PLUS
> 	  case TPM_ALG_SPHINCS_PLUS:
> 		  switch (publicArea->parameters.sphincsplusDetail.mode) {
> 		  case TPM_SPHINCS_PLUS_MODE_1:
> 			  consistent = sensitiveArea->sensitive.sphincsplus.t.size == 2096;
> 			  break;
> 		  case TPM_SPHINCS_PLUS_MODE_2:
> 			  consistent = sensitiveArea->sensitive.sphincsplus.t.size == 2800;
> 			  break;
> 		  case TPM_SPHINCS_PLUS_MODE_3:
> 			  consistent = sensitiveArea->sensitive.sphincsplus.t.size == 3504;
> 			  break;
> 		  case TPM_SPHINCS_PLUS_MODE_4:
> 			  consistent = sensitiveArea->sensitive.sphincsplus.t.size == 3856;
> 			  break;
> 		  default:
> 			  consistent = FALSE;
> 			  break;
> 		  }
> 		  break;
> #endif //TPM_ALG_SPHINCS_PLUS
1895a1976,2022
> #endif
> #if ALG_SPHINCS_PLUS
> 	  case TPM_ALG_SPHINCS_PLUS:
> 		  switch (publicArea->parameters.sphincsplusDetail.mode) {
> 		  case TPM_SPHINCS_PLUS_MODE_1:
> 			  if (publicArea->unique.sphincsplus.t.size != 896)
> 				  return TPM_RC_KEY + blamePublic;
> 			  break;
> 		  case TPM_SPHINCS_PLUS_MODE_2:
> 			  if (publicArea->unique.sphincsplus.t.size != 1184)
> 				  return TPM_RC_KEY + blamePublic;
> 			  break;
> 		  case TPM_SPHINCS_PLUS_MODE_3:
> 			  if (publicArea->unique.sphincsplus.t.size != 1472)
> 				  return TPM_RC_KEY + blamePublic;
> 			  break;
> 		  case TPM_SPHINCS_PLUS_MODE_4:
> 			  if (publicArea->unique.sphincsplus.t.size != 1760)
> 				  return TPM_RC_KEY + blamePublic;
> 			  break;
> 		  default:
> 			  return TPM_RCS_VALUE + blamePublic;
> 		  }
> 
> 		  if (sensitive != NULL) {
> 			  switch (publicArea->parameters.sphincsplusDetail.mode) {
> 			  case TPM_SPHINCS_PLUS_MODE_1:
> 				  if (sensitive->sensitive.sphincsplus.t.size != 2096)
> 					  return TPM_RCS_SIZE + blameSensitive;
> 				  break;
> 			  case TPM_SPHINCS_PLUS_MODE_2:
> 				  if (sensitive->sensitive.sphincsplus.t.size != 2800)
> 					  return TPM_RCS_SIZE + blameSensitive;
> 				  break;
> 			  case TPM_SPHINCS_PLUS_MODE_3:
> 				  if (sensitive->sensitive.sphincsplus.t.size != 3504)
> 					  return TPM_RCS_SIZE + blameSensitive;
> 				  break;
> 			  case TPM_SPHINCS_PLUS_MODE_4:
> 				  if (sensitive->sensitive.sphincsplus.t.size == 3856)
> 					  return TPM_RCS_SIZE + blameSensitive;
> 				  break;
> 			  default:
> 				  return TPM_RCS_VALUE + blamePublic;
> 			  }
> 		  }
> 		  break;
