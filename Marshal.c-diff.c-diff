1382a1383,1395
> /*****************************************************************************/
> /*                             Sphincs+ Mods                                */
> /*****************************************************************************/
> UINT32
> TPMS_SIG_SCHEME_SPHINCS_PLUS_Marshal(TPMS_SIG_SCHEME_SPHINCS_PLUS* source, BYTE** buffer, UINT32* size)
> {
> 	UINT32 written = 0;
> 	written += TPMS_SCHEME_HASH_Marshal(source, buffer, size);
> 	return written;
> }
> /*****************************************************************************/
> /*                             Sphincs+ Mods                                */
> /*****************************************************************************/
1600a1614,1618
> #if ALG_SPHINCS_PLUS
> 	  case TPM_ALG_SPHINCS_PLUS:
> 		  written += TPMS_SIG_SCHEME_SPHINCS_PLUS_Marshal(&source->sphincsplus, buffer, size);
> 		  break;
> #endif
1709a1728,1740
> /*****************************************************************************/
> /*                             Sphincs+ Mods                                */
> /*****************************************************************************/
> UINT32
> TPMI_ALG_SPHINCS_PLUS_SCHEME_Marshal(TPMI_ALG_SPHINCS_PLUS_SCHEME* source, BYTE** buffer, UINT32* size)
> {
> 	UINT32 written = 0;
> 	written += TPM_ALG_ID_Marshal(source, buffer, size);
> 	return written;
> }
> /*****************************************************************************/
> /*                             Sphincs+ Mods                                */
> /*****************************************************************************/
1769a1801,1815
> /*****************************************************************************/
> /*                             Sphincs+ Mods		                         */
> /*****************************************************************************/
> UINT32
> TPMT_SPHINCS_PLUS_SCHEME_Marshal(TPMT_SPHINCS_PLUS_SCHEME* source, BYTE** buffer, UINT32* size)
> {
> 	UINT32 written = 0;
> 
> 	written += TPMI_ALG_SPHINCS_PLUS_SCHEME_Marshal(&source->scheme, buffer, size);
> 	written += TPMU_ASYM_SCHEME_Marshal(&source->details, buffer, size, source->scheme);
> 	return written;
> }
> /*****************************************************************************/
> /*                             Sphincs+ Mods	                             */
> /*****************************************************************************/
1980a2027,2042
> /*****************************************************************************/
> /*                             Sphincs+ Mods	                             */
> /*****************************************************************************/
> UINT32
> TPMS_SIGNATURE_SPHINCS_PLUS_Marshal(TPMS_SIGNATURE_SPHINCS_PLUS* source, BYTE** buffer, UINT32* size)
> {
> 	UINT32 written = 0;
> 
> 	written += TPMI_ALG_HASH_Marshal(&source->hash, buffer, size);
> 	written += TPM2B_SPHINCS_PLUS_SIGNED_MESSAGE_Marshal(&source->sig, buffer, size);
> 	written += UINT8_Marshal(&source->mode, buffer, size);
> 	return written;
> }
> /*****************************************************************************/
> /*                             Sphincs+ Mods                                 */
> /*****************************************************************************/
1993a2056,2060
> #if ALG_SPHINCS_PLUS
> 	  case TPM_ALG_SPHINCS_PLUS:
> 		  written += TPMS_SIGNATURE_SPHINCS_PLUS_Marshal(&source->sphincsplus, buffer, size);
> 		  break;
> #endif
2096a2164,2168
> #if ALG_SPHINCS_PLUS
> 	  case TPM_ALG_SPHINCS_PLUS:
> 		  written += TPM2B_SPHINCS_PLUS_PUBLIC_KEY_Marshal(&source->sphincsplus, buffer, size);
> 		  break;
> #endif
2206a2279,2294
> /*****************************************************************************/
> /*                             Sphincs+ Mods                                 */
> /*****************************************************************************/
> UINT32
> TPMS_SPHINCS_PLUS_PARMS_Marshal(TPMS_SPHINCS_PLUS_PARMS* source, BYTE** buffer, UINT32* size)
> {
> 	UINT32 written = 0;
> 
> 	written += TPMT_SYM_DEF_OBJECT_Marshal(&source->symmetric, buffer, size);
> 	written += TPMT_SPHINCS_PLUS_SCHEME_Marshal(&source->scheme, buffer, size);
> 	written += UINT8_Marshal(&source->mode, buffer, size);
> 	return written;
> }
> /*****************************************************************************/
> /*                             Sphincs+ Mods                                 */
> /*****************************************************************************/
2235a2324,2328
> #if ALG_SPHINCS_PLUS
> 	  case TPM_ALG_SPHINCS_PLUS:
> 		  written += TPMS_SPHINCS_PLUS_PARMS_Marshal(&source->sphincsplusDetail, buffer, size);
> 		  break;
> #endif
2317a2411,2415
> #if ALG_SPHINCS_PLUS
> 	  case TPM_ALG_SPHINCS_PLUS:
> 		  written += TPM2B_SPHINCS_PLUS_SECRET_KEY_Marshal(&source->sphincsplus, buffer, size);
> 		  break;
> #endif
2633a2732,2760
> /*****************************************************************************/
> /*****************************************************************************/
> /*                             Sphincs+ Mods                                 */
> /*****************************************************************************/
> UINT32
> TPM2B_SPHINCS_PLUS_PUBLIC_KEY_Marshal(TPM2B_SPHINCS_PLUS_PUBLIC_KEY* source, BYTE** buffer, UINT32* size)
> {
> 	UINT32 written = 0;
> 	written += TPM2B_Marshal(&source->b, buffer, size);
> 	return written;
> }
> 
> UINT32
> TPM2B_SPHINCS_PLUS_SECRET_KEY_Marshal(TPM2B_SPHINCS_PLUS_SECRET_KEY* source, BYTE** buffer, UINT32* size)
> {
> 	UINT32 written = 0;
> 	written += TPM2B_Marshal(&source->b, buffer, size);
> 	return written;
> }
> 
> UINT32
> TPM2B_SPHINCS_PLUS_SIGNED_MESSAGE_Marshal(TPM2B_SPHINCS_PLUS_SIGNED_MESSAGE* source, BYTE** buffer, UINT32* size)
> {
> 	UINT32 written = 0;
> 	written += TPM2B_Marshal(&source->b, buffer, size);
> 	return written;
> }
> /*****************************************************************************/
> /*                             Sphincs+ Mods                                 */
